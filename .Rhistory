library(StereoMorph)
library(rgl)
spec<-read.csv('./Specimens_3D.csv')
View(spec)
spec<-read.csv('./NEW Specimens_3D.csv')
i<-1
dat.3d<-readShapes(paste('./UROP 3D Data/', spec[i,], '/Shapes 3D/1.txt', sep=""))
dat.lm<-dat.3d$landmarks
colnames(dat.lm)<-c("X", "Y", "Z")
i<-3
dat.3d.2<-readShapes(paste('./UROP 3D Data/', spec[i,], '/Shapes 3D/1.txt', sep=""))
dat.lm.2<-dat.3d.2$landmarks
colnames(dat.lm.2)<-c("X", "Y", "Z")
View(dat.lm)
View(dat.lm.2)
for(i in 1:nrow(spec)){
#read in 1.txt file
dat.i<-readShapes(paste('./UROP 3D Data/', spec[i,], '/Shapes 3D/1.txt', sep=""))
lm.i<-dat.i$landmarks
colnames(lm.i)<-c("X", "Y", "Z")
write.csv(lm.i, paste("./Specimen_landmarks/fixed/", spec[i,], ".csv", sep=""), na="")
}
for(i in 1:nrow(spec)){
#read in 1.txt file
dat.i<-readShapes(paste('./UROP 3D Data/', spec[i,], '/Shapes 3D/1.txt', sep=""))
lm.i<-dat.i$landmarks
colnames(lm.i)<-c("X", "Y", "Z")
write.csv(lm.i, paste("./Specimen_landmarks/", spec[i,], ".csv", sep=""), na="")
}
for(i in 1:nrow(spec)){
#read in 1.txt file
dat.i<-readShapes(paste('./UROP 3D Data/', spec[i,], '/Shapes 3D/1.txt', sep=""))
lm.i<-dat.i$landmarks
colnames(lm.i)<-c("X", "Y", "Z")
write.csv(lm.i, paste("./Specimen_landmarks/", spec[i,], ".csv", sep=""), na="")
}
spec<-read.csv('./NEW Specimens_3D.csv')
for(i in 1:nrow(spec)){
#read in 1.txt file
dat.i<-readShapes(paste('./UROP 3D Data/', spec[i,], '/Shapes 3D/1.txt', sep=""))
lm.i<-dat.i$landmarks
colnames(lm.i)<-c("X", "Y", "Z")
write.csv(lm.i, paste("./Specimen_landmarks/", spec[i,], ".csv", sep=""), na="")
}
spec<-read.csv('./NEW Specimens_3D.csv')
i<-1
dat.3d<-readShapes(paste('./UROP 3D Data/', spec[i,], '/Shapes 3D/1.txt', sep=""))
# Pull off Landmarks into data frame
dat.lm<-dat.3d$landmarks
colnames(dat.lm)<-c("X", "Y", "Z")
i<-3
dat.3d.2<-readShapes(paste('./UROP 3D Data/', spec[i,], '/Shapes 3D/1.txt', sep=""))
# Pull off Landmarks into data frame
dat.lm.2<-dat.3d.2$landmarks
colnames(dat.lm.2)<-c("X", "Y", "Z")
# Code to read in 1.txt files and export landmark data as CSV files
for(i in 1:nrow(spec)){
#read in 1.txt file
dat.i<-readShapes(paste('./UROP 3D Data/', spec[i,], '/Shapes 3D/1.txt', sep=""))
lm.i<-dat.i$landmarks
colnames(lm.i)<-c("X", "Y", "Z")
write.csv(lm.i, paste("./Specimen_landmarks/", spec[i,], ".csv", sep=""), na="")
}
spec<-as.vector(spec[,1])
i<-1
dat.3d<-readShapes(paste('./UROP 3D Data/', spec[i], '/Shapes 3D/1.txt', sep=""))
# Pull off Landmarks into data frame
dat.lm<-dat.3d$landmarks
colnames(dat.lm)<-c("X", "Y", "Z")
#Create new data object to store reorganized data
dat.lm2<-matrix(NA, 93, 126)  #create empty matrix to store data
nms<-read.csv('colnames_lm.csv', header=F)
nms<-as.vector(nms[,1])
colnames(dat.lm2)<-nms
#re-arrange landmark data to a single row
hilow<-matrix(NA,42,2)
hilow[,1]<-seq(1,124,3)
hilow[,2]<-seq(3,126,3)
for(i in 1:42){
dat.lm2[1,hilow[i,1]:hilow[i,2]]<-dat.lm[i,]
}
View(dat.lm2)
for(i in 1:length(spec)){
dat.3d<-readShapes(paste('./UROP 3D Data/', spec[i], '/Shapes 3D/1.txt', sep=""))
# Pull off Landmarks into data frame
dat.lm<-dat.3d$landmarks
for(j in 1:42){
dat.lm2[i,hilow[j,1]:hilow[j,2]]<-dat.lm[j,]
}
}
### Export TXT file of landmark data
write.csv(dat.lm2, "NEW Fisher_ontogeny_set2.csv", row.names=F)
### looked through csv file to identify potental issues with landmark number, coordinate system orientation, or order
## there are some alignment issues from different sessions
## we will try to use the function 'findOptimalPointAlignmen' in StereoMorph to fix these issues
#Try out function using 6080 and 6092
# Read in 3D landmark text file
i<-1
d1<-readShapes(paste('./UROP 3D Data/', spec[i], '/Shapes 3D/1.txt', sep=""))
i<-2
d2<-readShapes(paste('./UROP 3D Data/', spec[i], '/Shapes 3D/1.txt', sep=""))
#View before transformation
dat1<-d1$landmarks
colnames(dat1)<-c("X", "Y", "Z"); dat1<-as.data.frame(dat1)
dat2<-d2$landmarks
colnames(dat2)<-c("X", "Y", "Z"); dat2<-as.data.frame(dat2)
plot3d(dat1$X, dat1$Y, dat1$Z, xlab = 'X coord', ylab = 'Y coord', zlab = 'Z coord', axes = T, col = 'red', size = 10, aspect = F)
plot3d(dat2$X, dat2$Y, dat2$Z, xlab = 'X coord', ylab = 'Y coord', zlab = 'Z coord', axes = T, col = 'blue', size = 10, add=T)
#transform/align
d3<-findOptimalPointAlignment(d1$landmarks, d2$landmarks)
## just wants matrix of landmarks x coorinates, not a list
#view after transformation
dat3<-d3
colnames(dat3)<-c("X", "Y", "Z"); dat3<-as.data.frame(dat3)
plot3d(dat1$X, dat1$Y, dat1$Z, xlab = 'X coord', ylab = 'Y coord', zlab = 'Z coord', axes = T, col = 'red', size = 10, aspect = F)
plot3d(dat3$X, dat3$Y, dat3$Z, xlab = 'X coord', ylab = 'Y coord', zlab = 'Z coord', axes = T, col = 'blue', size = 10, add=T)
#### Align all the datasets to 6080
# Step 1: read in reference data set (6080)
d1<-readShapes('./UROP 3D Data/6080/Shapes 3D/1.txt')
d1<-d1$landmarks  #save landmark data and drop other list elements
d1p<-as.data.frame(d1) #to use for plotting alignments
colnames(d1p)<-c("x", "y", "z")
# Step 2: Loop to re-align and export JPEGs of alignment for review
for(i in 2:132){
d2<-readShapes(paste('./UROP 3D Data/', spec[i], '/Shapes 3D/1.txt', sep=""))
d2<-d2$landmarks
#re-align
d2b<-findOptimalPointAlignment(d1, d2)
#Export re-aligned landmarks
write.csv(d2b, paste("./Specimen_landmarks/fixed/", spec[i], "_realigned.csv", sep=""), na="")
#Export Images of alignment for diagnostics
d2p<-as.data.frame(d2b)
colnames(d2p)<-c("x", "y", "z")
jpeg(paste("./Specimen_landmarks/fixed/verify_alignment/", spec[i], "_plots.jpg", sep=""),
width=8.5, height=11, units="in", res=600)
par(mfrow=c(3,1))
plot(d1p$y ~ d1p$x, xlab="x", ylab="y", main="XY align", pch=16, col="red")
points(d2p$y ~ d2p$x, pch=16, col="blue")
plot(d1p$z ~ d1p$x, xlab="x", ylab="z", main="XZ align", pch=16, col="red")
points(d2p$z ~ d2p$x, pch=16, col="blue")
plot(d1p$y ~ d1p$z, xlab="z", ylab="y", main="ZY align", pch=16, col="red")
points(d2p$y ~ d2p$z, pch=16, col="blue")
dev.off()
}
### Re-organize landmark data using re-aligned data #####
# Read in re-aligned 3D landmark csv files
i<-1
dat.lm<-read.csv(paste('./Specimen_landmarks/fixed/', spec[i], '_realigned.csv', sep=""))
dat.lm<-dat.lm[,2:4]
dat.lm<-as.matrix(dat.lm)
#Create new data object to store reorganized data
dat.lm2<-matrix(NA, 132, 126)  #create empty matrix to store data
nms<-read.csv('colnames_lm.csv', header=F)
nms<-as.vector(nms[,1])
colnames(dat.lm2)<-nms
#re-arrange landmark data to a single row
hilow<-matrix(NA,42,2)
hilow[,1]<-seq(1,124,3)
hilow[,2]<-seq(3,126,3)
for(i in 1:42){
dat.lm2[1,hilow[i,1]:hilow[i,2]]<-dat.lm[i,]
}
